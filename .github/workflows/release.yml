name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  release-windows:
    name: Windows Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: ''
      
      - name: Build EmberViewer
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%Qt5_DIR%
          cmake --build . --config Release
      
      - name: Deploy Qt dependencies
        shell: cmd
        run: |
          mkdir deploy
          copy build\EmberViewer\Release\EmberViewer.exe deploy\
          cd deploy
          windeployqt.exe --release --no-translations EmberViewer.exe
      
      - name: Verify deployed files
        shell: cmd
        run: |
          echo === Deployed files ===
          dir deploy /s
      
      - name: Install NSIS
        run: |
          choco install nsis -y
      
      - name: Create installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
      
      - name: Rename installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          move EmberViewer-Setup.exe EmberViewer-${{ github.ref_name }}-Setup.exe
      
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Windows-Installer
          path: EmberViewer/installer/windows/EmberViewer-*.exe
          retention-days: 30
      
      - name: Add installer to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: EmberViewer/installer/windows/EmberViewer-*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-linux:
    name: Linux AppImage
    runs-on: ubuntu-22.04  # Use Ubuntu 22.04 for good compatibility and runner availability
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt and build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qtbase5-dev \
            qtbase5-dev-tools \
            qt5-qmake \
            libqt5gui5 \
            libqt5widgets5 \
            libqt5network5 \
            cmake \
            build-essential \
            ninja-build \
            file \
            libxcb-xinerama0 \
            libxcb-cursor0 \
            libxkbcommon-x11-0 \
            libxkbcommon0 \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            wget
      
      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_WARN_DEPRECATED=OFF \
            -GNinja
      
      - name: Build EmberViewer
        run: |
          cd build
          ninja EmberViewer
      
      - name: Install to AppDir
        run: |
          cd build
          DESTDIR=AppDir ninja install
          
          # Create AppDir structure
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/scalable/apps
          
          # Copy desktop file
          cp ../EmberViewer/resources/EmberViewer.desktop AppDir/usr/share/applications/
          
          # Copy icon
          cp ../EmberViewer/resources/icon.svg AppDir/usr/share/icons/hicolor/scalable/apps/EmberViewer.svg
          
          # Create symlinks for AppImage
          ln -sf usr/share/applications/EmberViewer.desktop AppDir/EmberViewer.desktop
          ln -sf usr/share/icons/hicolor/scalable/apps/EmberViewer.svg AppDir/EmberViewer.svg
          ln -sf usr/bin/EmberViewer AppDir/AppRun
      
      - name: Download linuxdeploy and Qt plugin
        run: |
          cd build
          
          # Download linuxdeploy
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          
          # Download Qt plugin
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
      
      - name: Create AppImage with Wayland support
        run: |
          cd build
          
          # Extract linuxdeploy (to avoid FUSE issues on GitHub Actions)
          ./linuxdeploy-x86_64.AppImage --appimage-extract
          mv squashfs-root linuxdeploy-squashfs
          
          ./linuxdeploy-plugin-qt-x86_64.AppImage --appimage-extract
          mv squashfs-root linuxdeploy-plugin-qt-squashfs
          
          # Set up environment for linuxdeploy
          export QMAKE=/usr/bin/qmake
          export QT_SELECT=qt5
          
          # Make Qt plugin accessible as a plugin
          mkdir -p plugins
          ln -s "$(pwd)/linuxdeploy-plugin-qt-squashfs/AppRun" plugins/linuxdeploy-plugin-qt.sh
          chmod +x plugins/linuxdeploy-plugin-qt.sh
          export LINUXDEPLOY_PLUGIN_PATH="$(pwd)/plugins"
          
          echo "=== Running linuxdeploy ==="
          # Create AppImage with Qt plugin
          linuxdeploy-squashfs/AppRun \
            --appdir=AppDir \
            --plugin qt \
            --output appimage
          
          echo "=== Checking for created AppImage ==="
          ls -la *.AppImage || echo "No AppImage files found"
          
          # Rename AppImage
          VERSION="${{ github.ref_name }}"
          if [[ "$VERSION" == refs/heads/* ]]; then
            VERSION="continuous"
          fi
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
          # Find any AppImage file and rename it
          APPIMAGE_FILE=$(ls *.AppImage 2>/dev/null | head -n1)
          if [ -n "$APPIMAGE_FILE" ]; then
            echo "Found AppImage: $APPIMAGE_FILE"
            mv "$APPIMAGE_FILE" "EmberViewer-${VERSION}-x86_64.AppImage"
            echo "Renamed to: EmberViewer-${VERSION}-x86_64.AppImage"
          else
            echo "ERROR: No AppImage was created!"
            exit 1
          fi
      
      - name: Configure Wayland support
        run: |
          cd build
          
          # Extract the AppImage to add Wayland wrapper
          APPIMAGE_FILE=$(ls EmberViewer-*-x86_64.AppImage)
          chmod +x "$APPIMAGE_FILE"
          ./"$APPIMAGE_FILE" --appimage-extract
          mv squashfs-root emberviewer-appdir
          
          # Create wrapper script for Wayland-first behavior
          cat > emberviewer-appdir/AppRun << 'EOF'
          #!/bin/bash
          # AppRun wrapper with Wayland-first support
          
          # Get the directory where this script is located
          HERE="$(dirname "$(readlink -f "${0}")")"
          
          # Set up library paths
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          
          # Wayland-first with X11 fallback
          if [ -z "$QT_QPA_PLATFORM" ]; then
              if [ -n "$WAYLAND_DISPLAY" ]; then
                  export QT_QPA_PLATFORM=wayland
              elif [ -n "$DISPLAY" ]; then
                  export QT_QPA_PLATFORM=xcb
              fi
          fi
          
          # Ensure Qt can find Wayland platform plugin
          export QT_PLUGIN_PATH="${HERE}/usr/plugins:${QT_PLUGIN_PATH}"
          export QT_QPA_PLATFORM_PLUGIN_PATH="${HERE}/usr/plugins/platforms:${QT_QPA_PLATFORM_PLUGIN_PATH}"
          
          # Execute the application
          exec "${HERE}/usr/bin/EmberViewer" "$@"
          EOF
          
          chmod +x emberviewer-appdir/AppRun
          
          # Repackage the AppImage
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage --appimage-extract
          
          APPIMAGE_NAME="${APPIMAGE_FILE}"
          rm "$APPIMAGE_FILE"
          
          squashfs-root/AppRun emberviewer-appdir "$APPIMAGE_NAME"
          
          chmod +x "$APPIMAGE_NAME"
      
      - name: Verify AppImage
        run: |
          cd build
          APPIMAGE_FILE=$(ls EmberViewer-*-x86_64.AppImage)
          ls -lh "$APPIMAGE_FILE"
          file "$APPIMAGE_FILE"
          
          # Test extraction
          ./"$APPIMAGE_FILE" --appimage-extract >/dev/null
          echo "=== AppImage contents ==="
          ls -la squashfs-root/usr/bin/
          echo "=== Qt plugins ==="
          ls -la squashfs-root/usr/plugins/platforms/ || echo "No Qt platform plugins found"
          echo "=== AppRun script ==="
          head -20 squashfs-root/AppRun
      
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Linux-AppImage
          path: build/EmberViewer-*-x86_64.AppImage
          retention-days: 30
      
      - name: Add AppImage to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: build/EmberViewer-*-x86_64.AppImage
          body: |
            ## Linux AppImage
            
            **Wayland Support**: This AppImage defaults to Wayland when available, with automatic X11 fallback.
            
            ### Installation
            ```bash
            chmod +x EmberViewer-*-x86_64.AppImage
            ./EmberViewer-*-x86_64.AppImage
            ```
            
            ### Force specific display server
            ```bash
            # Force Wayland
            QT_QPA_PLATFORM=wayland ./EmberViewer-*-x86_64.AppImage
            
            # Force X11
            QT_QPA_PLATFORM=xcb ./EmberViewer-*-x86_64.AppImage
            ```
            
            ### System Integration
            To integrate with your desktop environment:
            ```bash
            # Extract and install
            ./EmberViewer-*-x86_64.AppImage --appimage-extract
            sudo mv squashfs-root /opt/EmberViewer
            sudo ln -s /opt/EmberViewer/AppRun /usr/local/bin/EmberViewer
            
            # Desktop entry
            sudo cp /opt/EmberViewer/EmberViewer.desktop /usr/share/applications/
            sudo cp /opt/EmberViewer/EmberViewer.svg /usr/share/icons/hicolor/scalable/apps/
            sudo update-desktop-database
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Placeholder for future macOS release builds
  # release-macos:
  #   name: macOS DMG
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     # ... macOS DMG creation steps
