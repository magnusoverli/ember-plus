name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  release-linux:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qtbase5-dev \
            qtbase5-dev-tools \
            qt5-qmake \
            qtwayland5 \
            cmake \
            build-essential \
            ninja-build \
            libgl1-mesa-dev \
            libxkbcommon0 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xkb1 \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            wget \
            file
      
      - name: Build EmberViewer (Release)
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_WARN_DEPRECATED=OFF \
            -GNinja
          ninja EmberViewer
      
      - name: Verify build
        run: |
          ls -lh build/EmberViewer/EmberViewer
          file build/EmberViewer/EmberViewer
          ldd build/EmberViewer/EmberViewer
      
      - name: Download linuxdeploy and Qt plugin
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
      
      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary
          cp build/EmberViewer/EmberViewer AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/emberviewer.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=EmberViewer
          Comment=Ember+ Protocol Viewer
          Exec=EmberViewer
          Icon=emberviewer
          Categories=Network;Utility;
          Terminal=false
          EOF
          
          # Copy icon from repository
          cp EmberViewer/resources/icon.svg AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.svg
          
          # Also create PNG version for better compatibility
          sudo apt-get install -y imagemagick
          convert AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.svg \
                  AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.png
      
      - name: Verify Qt plugins are available
        run: |
          echo "=== Checking for Qt platform plugins ==="
          ls -la /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/ || true
          echo ""
          echo "=== Checking for Wayland libraries ==="
          dpkg -L qtwayland5 | grep -E "\.so" || true
      
      - name: Create AppImage
        env:
          QMAKE: /usr/lib/qt5/bin/qmake
          QT_PLUGIN_PATH: /usr/lib/x86_64-linux-gnu/qt5/plugins
          QT_QPA_PLATFORM_PLUGIN_PATH: /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms
        run: |
          # Set environment for Qt plugin
          export QT_SELECT=qt5
          export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
          
          # Run linuxdeploy with Qt plugin and icon
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --plugin qt \
            --output appimage \
            --desktop-file AppDir/usr/share/applications/emberviewer.desktop \
            --icon-file AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.png
      
      - name: Manually add Wayland plugins
        run: |
          echo "=== Manually copying Wayland platform plugins ==="
          mkdir -p AppDir/usr/plugins/platforms
          cp -v /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqwayland*.so AppDir/usr/plugins/platforms/
          
          echo "=== Copying Wayland support plugins ==="
          mkdir -p AppDir/usr/plugins/wayland-decoration-client
          mkdir -p AppDir/usr/plugins/wayland-graphics-integration-client
          mkdir -p AppDir/usr/plugins/wayland-shell-integration
          
          cp -rv /usr/lib/x86_64-linux-gnu/qt5/plugins/wayland-decoration-client/*.so AppDir/usr/plugins/wayland-decoration-client/ || true
          cp -rv /usr/lib/x86_64-linux-gnu/qt5/plugins/wayland-graphics-integration-client/*.so AppDir/usr/plugins/wayland-graphics-integration-client/ || true
          cp -rv /usr/lib/x86_64-linux-gnu/qt5/plugins/wayland-shell-integration/*.so AppDir/usr/plugins/wayland-shell-integration/ || true
          
          echo "=== Copying Wayland libraries ==="
          mkdir -p AppDir/usr/lib
          cp -v /usr/lib/x86_64-linux-gnu/libwayland-client.so.* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libwayland-cursor.so.* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libwayland-egl.so.* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libxkbcommon.so.* AppDir/usr/lib/ || true
      
      - name: Verify Wayland plugin in AppImage
        run: |
          echo "=== Checking bundled Qt plugins in AppImage ==="
          ls -la AppDir/usr/plugins/platforms/
          if [ -f AppDir/usr/plugins/platforms/libqwayland-egl.so ]; then
            echo "✓ Wayland plugin bundled!"
          else
            echo "✗ Wayland plugin NOT bundled!"
          fi
      
      - name: Rename AppImage
        run: |
          # Get version from tag or use commit sha
          if [ -n "${{ github.ref_name }}" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="$(git rev-parse --short HEAD)"
          fi
          
          # Find the generated AppImage
          APPIMAGE=$(ls EmberViewer*.AppImage | head -n 1)
          
          if [ -n "$APPIMAGE" ]; then
            mv "$APPIMAGE" "EmberViewer-${VERSION}-x86_64.AppImage"
            echo "Created: EmberViewer-${VERSION}-x86_64.AppImage"
            ls -lh EmberViewer-${VERSION}-x86_64.AppImage
          else
            echo "ERROR: AppImage not found!"
            ls -la
            exit 1
          fi
      
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Linux-AppImage
          path: EmberViewer-*.AppImage
          retention-days: 30
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: EmberViewer-*.AppImage
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## EmberViewer ${{ github.ref_name }}
            
            ### Linux Installation
            
            1. Download `EmberViewer-${{ github.ref_name }}-x86_64.AppImage`
            2. Make it executable: `chmod +x EmberViewer-*.AppImage`
            3. Run it: `./EmberViewer-*.AppImage`
            
            No installation required! The AppImage contains all dependencies.
            
            ### Features
            - Ember+ protocol viewer
            - Parameter editing (Integer, Real, String, Boolean, Enum, Trigger)
            - Matrix crosspoint visualization
            - Read-only matrix display
            
            ### Requirements
            - Linux x86_64
            - GLIBC 2.31+ (Ubuntu 20.04+, similar for other distros)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean up dev release
        if: success()
        continue-on-error: true
        run: |
          # Delete the latest-dev pre-release and its tag (only after successful release)
          gh release delete latest-dev --yes || true
          git push origin --delete latest-dev || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Placeholder for future macOS release builds
  # release-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     # ... macOS AppImage/DMG creation steps
  
  # Placeholder for future Windows release builds  
  # release-windows:
  #   runs-on: windows-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     # ... Windows installer creation steps

