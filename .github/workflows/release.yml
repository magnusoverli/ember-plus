name: Release Build

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.2.0 or v0.0.8.1
  workflow_dispatch:  # Allow manual triggering

jobs:
  release-windows:
    name: Windows Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
      
      - name: Build EmberViewer
        shell: cmd
        env:
          EMBERVIEWER_UPDATE_SECRET: ${{ secrets.EMBERVIEWER_UPDATE_SECRET }}
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%Qt5_DIR%
          cmake --build . --config Release
      
      - name: Deploy Qt dependencies
        shell: cmd
        run: |
          mkdir deploy
          copy build\EmberViewer\Release\EmberViewer.exe deploy\
          cd deploy
          windeployqt.exe --release --no-translations EmberViewer.exe
      
      - name: Download and deploy OpenSSL DLLs
        shell: powershell
        run: |
          # Download OpenSSL 1.1.1 DLLs (compatible with Qt 5.15.2)
          $openssl_url = "https://download.firedaemon.com/FireDaemon-OpenSSL/openssl-1.1.1w.zip"
          Invoke-WebRequest -Uri $openssl_url -OutFile openssl.zip
          Expand-Archive -Path openssl.zip -DestinationPath openssl_temp
          
          # Copy the x64 DLLs to deploy directory
          Copy-Item "openssl_temp\openssl-1.1\x64\bin\libssl-1_1-x64.dll" "deploy\"
          Copy-Item "openssl_temp\openssl-1.1\x64\bin\libcrypto-1_1-x64.dll" "deploy\"
          
          Write-Host "OpenSSL DLLs deployed successfully"
      
      - name: Verify deployed files
        shell: cmd
        run: |
          echo === Deployed files ===
          dir deploy /s
      
      - name: Install NSIS
        run: |
          choco install nsis -y
      
      - name: Create installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
      
      - name: Rename installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          move EmberViewer-Setup.exe EmberViewer-${{ github.ref_name }}-Setup.exe
      
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Windows-Installer
          path: EmberViewer/installer/windows/EmberViewer-*.exe
          retention-days: 30
      
      - name: Add installer to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: EmberViewer/installer/windows/EmberViewer-*.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-linux:
    name: Linux AppImage
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '5.15.2'
          host: 'linux'
          target: 'desktop'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-dev
      
      - name: Build EmberViewer
        env:
          EMBERVIEWER_UPDATE_SECRET: ${{ secrets.EMBERVIEWER_UPDATE_SECRET }}
        run: |
          echo "ðŸš€ Building with $(nproc) CPU cores"
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_CXX_FLAGS="-O3 -march=native -pipe" \
            -DCMAKE_C_FLAGS="-O3 -march=native -pipe"
          cmake --build . --config Release -- -j$(nproc)
      
      - name: Install to AppDir
        run: |
          cd build
          make install DESTDIR=AppDir
      
      - name: Install FUSE (required for AppImage tools)
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2
          sudo modprobe fuse || true
      
      - name: Download linuxdeploy and Qt plugin
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage
      
      - name: Create AppImage
        run: |
          export QMAKE=$(which qmake)
          echo "QMAKE path: $QMAKE"
          cd build
          echo "Running linuxdeploy..."
          ../linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage \
            --desktop-file=../EmberViewer/resources/EmberViewer.desktop \
            --icon-file=../EmberViewer/resources/icon.svg
          echo "Linuxdeploy completed. Checking for AppImage files..."
          ls -la *.AppImage 2>/dev/null || echo "No AppImage files found in build directory"
      
      - name: Rename AppImage
        run: |
          cd build
          # Find the generated AppImage file
          APPIMAGE_FILE=$(ls *.AppImage 2>/dev/null | head -n 1)
          if [ -n "$APPIMAGE_FILE" ]; then
            echo "Found AppImage: $APPIMAGE_FILE"
            mv "$APPIMAGE_FILE" "EmberViewer-${{ github.ref_name }}-x86_64.AppImage"
          else
            echo "ERROR: No AppImage file found!"
            ls -la
            exit 1
          fi
      
      - name: Generate zsync file for AppImage updates
        run: |
          sudo apt-get install -y zsync
          cd build
          APPIMAGE_FILE="EmberViewer-${{ github.ref_name }}-x86_64.AppImage"
          if [ -f "$APPIMAGE_FILE" ]; then
            echo "Generating zsync file for $APPIMAGE_FILE"
            zsyncmake "$APPIMAGE_FILE" -o "${APPIMAGE_FILE}.zsync"
            ls -lh "${APPIMAGE_FILE}.zsync"
          else
            echo "ERROR: AppImage not found for zsync generation"
            exit 1
          fi
      
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Linux-AppImage
          path: |
            build/EmberViewer-*.AppImage
            build/EmberViewer-*.AppImage.zsync
          retention-days: 30
      
      - name: Add AppImage to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/EmberViewer-*.AppImage
            build/EmberViewer-*.AppImage.zsync
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
