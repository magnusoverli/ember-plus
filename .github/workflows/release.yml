name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  release-linux:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qtbase5-dev \
            qtbase5-dev-tools \
            qt5-qmake \
            qtwayland5 \
            cmake \
            build-essential \
            ninja-build \
            libgl1-mesa-dev \
            libxkbcommon0 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xkb1 \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            wget \
            file
      
      - name: Build EmberViewer (Release)
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_WARN_DEPRECATED=OFF \
            -GNinja
          ninja EmberViewer
      
      - name: Verify build
        run: |
          ls -lh build/EmberViewer/EmberViewer
          file build/EmberViewer/EmberViewer
          ldd build/EmberViewer/EmberViewer
      
      - name: Download linuxdeploy and Qt plugin
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
      
      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary
          cp build/EmberViewer/EmberViewer AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/emberviewer.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=EmberViewer
          Comment=Ember+ Protocol Viewer
          Exec=EmberViewer
          Icon=emberviewer
          Categories=Network;Utility;
          Terminal=false
          EOF
          
          # Copy icon from repository
          cp EmberViewer/resources/icon.svg AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.svg
          
          # Also create PNG version for better compatibility
          sudo apt-get install -y imagemagick
          convert AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.svg \
                  AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.png
      
      - name: Verify Qt plugins are available
        run: |
          echo "=== Checking for Qt platform plugins ==="
          ls -la /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/ || true
          echo ""
          echo "=== Checking for Wayland libraries ==="
          dpkg -L qtwayland5 | grep -E "\.so" || true
      
      - name: Pre-bundle Wayland plugins to AppDir
        run: |
          echo "=== Creating qt.conf for proper plugin paths ==="
          mkdir -p AppDir/usr/bin
          cat > AppDir/usr/bin/qt.conf << 'EOF'
          [Paths]
          Plugins = ../lib/qt5/plugins
          EOF
          
          echo "=== Pre-copying Wayland platform plugins to AppDir ==="
          mkdir -p AppDir/usr/lib/qt5/plugins/platforms
          cp -v /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqwayland*.so AppDir/usr/lib/qt5/plugins/platforms/ || true
          cp -v /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqxcb.so AppDir/usr/lib/qt5/plugins/platforms/ || true
          
          echo "=== Pre-copying Wayland support plugins ==="
          mkdir -p AppDir/usr/lib/qt5/plugins/wayland-decoration-client
          mkdir -p AppDir/usr/lib/qt5/plugins/wayland-graphics-integration-client
          mkdir -p AppDir/usr/lib/qt5/plugins/wayland-shell-integration
          
          cp -rv /usr/lib/x86_64-linux-gnu/qt5/plugins/wayland-decoration-client/*.so AppDir/usr/lib/qt5/plugins/wayland-decoration-client/ || true
          cp -rv /usr/lib/x86_64-linux-gnu/qt5/plugins/wayland-graphics-integration-client/*.so AppDir/usr/lib/qt5/plugins/wayland-graphics-integration-client/ || true
          cp -rv /usr/lib/x86_64-linux-gnu/qt5/plugins/wayland-shell-integration/*.so AppDir/usr/lib/qt5/plugins/wayland-shell-integration/ || true
          
          echo "=== Pre-copying Wayland libraries ==="
          mkdir -p AppDir/usr/lib
          cp -v /usr/lib/x86_64-linux-gnu/libwayland-client.so.* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libwayland-cursor.so.* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libwayland-egl.so.* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libxkbcommon.so.* AppDir/usr/lib/ || true
          
          echo "=== Verifying pre-bundled plugins ==="
          ls -la AppDir/usr/lib/qt5/plugins/platforms/
          
          echo "=== Verifying qt.conf ==="
          cat AppDir/usr/bin/qt.conf
      
      - name: Copy dependencies with linuxdeploy (without Qt plugin first)
        run: |
          # First pass: deploy the binary and its non-Qt dependencies
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --executable AppDir/usr/bin/EmberViewer \
            --desktop-file AppDir/usr/share/applications/emberviewer.desktop \
            --icon-file AppDir/usr/share/icons/hicolor/256x256/apps/emberviewer.png
      
      - name: Manually copy ALL Qt dependencies
        run: |
          echo "=== Copying Qt libraries ==="
          mkdir -p AppDir/usr/lib
          
          # Copy Qt5 core libraries
          ldd build/EmberViewer/EmberViewer | grep libQt5 | awk '{print $3}' | while read lib; do
            if [ -n "$lib" ] && [ -f "$lib" ]; then
              cp -v "$lib" AppDir/usr/lib/
            fi
          done
          
          # Also copy from standard Qt location
          cp -v /usr/lib/x86_64-linux-gnu/libQt5*.so.5 AppDir/usr/lib/ 2>/dev/null || true
          
          echo "=== Verifying Qt libraries ==="
          ls -la AppDir/usr/lib/libQt5*
      
      - name: Create final AppImage
        run: |
          # Use appimagetool directly to have full control
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Create a custom AppRun script with Wayland support
          cat > AppDir/AppRun << 'APPRUNEOF'
#!/bin/bash
# AppRun script for EmberViewer with Wayland support

SELF=$(readlink -f "$0")
HERE=${SELF%/*}

# Export library paths
export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
export QT_PLUGIN_PATH="${HERE}/usr/lib/qt5/plugins"

# Prefer Wayland but allow X11 fallback
if [ -z "$QT_QPA_PLATFORM" ]; then
    # Check if running in Wayland session
    if [ "$XDG_SESSION_TYPE" = "wayland" ] || [ -n "$WAYLAND_DISPLAY" ]; then
        export QT_QPA_PLATFORM=wayland
        echo "EmberViewer: Using Wayland platform" >&2
    else
        echo "EmberViewer: Using X11 platform" >&2
    fi
fi

# Debug: Show platform selection
echo "QT_QPA_PLATFORM=$QT_QPA_PLATFORM" >&2
echo "QT_PLUGIN_PATH=$QT_PLUGIN_PATH" >&2

# Execute the application
exec "${HERE}/usr/bin/EmberViewer" "$@"
APPRUNEOF
          
          chmod +x AppDir/AppRun
          
          echo "=== Custom AppRun created ==="
          cat AppDir/AppRun
          
          # Create the AppImage
          ARCH=x86_64 ./appimagetool-x86_64.AppImage AppDir EmberViewer-x86_64.AppImage
          
          # Clean up
          rm appimagetool-x86_64.AppImage
          
          echo "=== AppImage created ==="
          ls -lh EmberViewer-x86_64.AppImage
      
      - name: Verify Wayland plugin in final AppImage
        run: |
          echo "=== Extracting and checking AppImage contents ==="
          # Extract the AppImage to verify contents
          APPIMAGE=$(ls EmberViewer*.AppImage | head -n 1)
          if [ -n "$APPIMAGE" ]; then
            ./"$APPIMAGE" --appimage-extract > /dev/null 2>&1 || true
            
            echo "=== Checking for Qt platform plugins in extracted AppImage ==="
            find squashfs-root -name "libqwayland*.so" -o -name "libqxcb.so" || echo "No platform plugins found!"
            
            echo ""
            echo "=== Checking for Wayland support plugins ==="
            find squashfs-root -type d -name "wayland-*" || echo "No Wayland support directories found!"
            
            # Clean up extracted files
            rm -rf squashfs-root
          else
            echo "ERROR: AppImage not found for verification!"
          fi
      
      - name: Rename AppImage
        run: |
          # Get version from tag or use commit sha
          if [ -n "${{ github.ref_name }}" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="$(git rev-parse --short HEAD)"
          fi
          
          # Find the generated AppImage
          APPIMAGE=$(ls EmberViewer*.AppImage | head -n 1)
          
          if [ -n "$APPIMAGE" ]; then
            mv "$APPIMAGE" "EmberViewer-${VERSION}-x86_64.AppImage"
            echo "Created: EmberViewer-${VERSION}-x86_64.AppImage"
            ls -lh EmberViewer-${VERSION}-x86_64.AppImage
          else
            echo "ERROR: AppImage not found!"
            ls -la
            exit 1
          fi
      
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Linux-AppImage
          path: EmberViewer-*.AppImage
          retention-days: 30
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: EmberViewer-*.AppImage
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## EmberViewer ${{ github.ref_name }}
            
            ### Linux Installation
            
            1. Download `EmberViewer-${{ github.ref_name }}-x86_64.AppImage`
            2. Make it executable: `chmod +x EmberViewer-*.AppImage`
            3. Run it: `./EmberViewer-*.AppImage`
            
            No installation required! The AppImage contains all dependencies.
            
            ### Features
            - Ember+ protocol viewer
            - Parameter editing (Integer, Real, String, Boolean, Enum, Trigger)
            - Matrix crosspoint visualization
            - Read-only matrix display
            
            ### Requirements
            - Linux x86_64
            - GLIBC 2.31+ (Ubuntu 20.04+, similar for other distros)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean up dev release
        if: success()
        continue-on-error: true
        run: |
          # Delete the latest-dev pre-release and its tag (only after successful release)
          gh release delete latest-dev --yes || true
          git push origin --delete latest-dev || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  release-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: ''
      
      - name: Build EmberViewer
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%Qt5_DIR%
          cmake --build . --config Release
      
      - name: Deploy Qt dependencies
        shell: cmd
        run: |
          mkdir deploy
          copy build\EmberViewer\Release\EmberViewer.exe deploy\
          cd deploy
          windeployqt.exe --release --no-translations EmberViewer.exe
      
      - name: Verify deployed files
        shell: cmd
        run: |
          echo === Deployed files ===
          dir deploy /s
      
      - name: Install NSIS
        run: |
          choco install nsis -y
      
      - name: Create installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
      
      - name: Rename installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          move EmberViewer-Setup.exe EmberViewer-${{ github.ref_name }}-Setup.exe
      
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Windows-Installer
          path: EmberViewer/installer/windows/EmberViewer-*.exe
          retention-days: 30
      
      - name: Add installer to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: EmberViewer/installer/windows/EmberViewer-*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Placeholder for future macOS release builds
  # release-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     # ... macOS DMG creation steps

