name: Release Build

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.2.0 or v0.0.8.1
  workflow_dispatch:  # Allow manual triggering

jobs:
  release-windows:
    name: Windows Installer
    runs-on: [self-hosted, Windows, X64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full git history for version detection
      
      - name: Ensure Git is in PATH
        shell: powershell
        run: |
          # Add Git to PATH if not already there
          $gitPath = "C:\Program Files\Git\bin"
          if (Test-Path $gitPath) {
            if ($env:Path -notlike "*$gitPath*") {
              echo "$gitPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host "Added Git to PATH"
            } else {
              Write-Host "Git already in PATH"
            }
          } else {
            Write-Host "WARNING: Git not found at $gitPath - version detection may fail"
          }
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.*'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          cache: true  # Enable Qt caching for faster subsequent builds
      
      - name: Verify CMake and Ninja are installed
        shell: powershell
        run: |
          Write-Host "Checking for CMake..."
          $cmake = Get-Command cmake -ErrorAction SilentlyContinue
          if ($cmake) {
            Write-Host "âœ“ CMake found: $($cmake.Source)"
            cmake --version
          } else {
            Write-Host "ERROR: CMake not found in PATH"
            Write-Host "Please install CMake on the runner: choco install cmake -y"
            exit 1
          }
          
          Write-Host "`nChecking for Ninja..."
          $ninja = Get-Command ninja -ErrorAction SilentlyContinue
          if ($ninja) {
            Write-Host "âœ“ Ninja found: $($ninja.Source)"
            ninja --version
          } else {
            Write-Host "WARNING: Ninja not found (optional, using MSBuild instead)"
          }
      
      - name: Setup Visual Studio environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      
      - name: Build EmberViewer
        shell: cmd
        env:
          EMBERVIEWER_UPDATE_SECRET: ${{ secrets.EMBERVIEWER_UPDATE_SECRET }}
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%Qt6_DIR%
          cmake --build . --config Release -- /maxcpucount
      
      - name: Deploy Qt dependencies
        shell: cmd
        run: |
          mkdir deploy
          copy build\EmberViewer\Release\EmberViewer.exe deploy\
          cd deploy
          windeployqt.exe --release --no-translations EmberViewer.exe
      
      - name: Check and deploy OpenSSL DLLs
        shell: powershell
        run: |
          # Check if OpenSSL DLLs are already included by Qt
          $qtDir = $env:QT_ROOT_DIR
          Write-Host "QT_ROOT_DIR: $qtDir"
          
          if ($qtDir) {
            # Look for OpenSSL DLLs in Qt directory
            $qtBinDir = Join-Path $qtDir "bin"
            Write-Host "Checking Qt bin directory: $qtBinDir"
            $sslFiles = Get-ChildItem -Path $qtBinDir -Filter "*ssl*.dll" -ErrorAction SilentlyContinue
            
            if ($sslFiles) {
              Write-Host "OpenSSL DLLs found in Qt directory, copying to deploy..."
              Copy-Item "$qtBinDir\*ssl*.dll" "deploy\" -ErrorAction SilentlyContinue
              Copy-Item "$qtBinDir\*crypto*.dll" "deploy\" -ErrorAction SilentlyContinue
              Write-Host "OpenSSL DLLs deployed from Qt"
            } else {
              Write-Host "No OpenSSL DLLs found in Qt directory"
            }
          } else {
            Write-Host "QT_ROOT_DIR not set, skipping OpenSSL deployment"
          }
          Write-Host "Application will use system OpenSSL if needed"
      
      - name: Verify deployed files
        shell: cmd
        run: |
          echo === Deployed files ===
          dir deploy /s
      
      - name: Ensure Chocolatey is available
        shell: powershell
        run: |
          # Check if choco command is available
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Host "Chocolatey command not found in PATH"
            
            # Check if Chocolatey is installed but not in PATH
            $chocoPath = "C:\ProgramData\chocolatey\bin"
            if (Test-Path $chocoPath) {
              Write-Host "Chocolatey found at $chocoPath, adding to PATH"
              echo "$chocoPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              $env:Path += ";$chocoPath"
            } else {
              Write-Host "Installing Chocolatey..."
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            }
          } else {
            Write-Host "Chocolatey already available in PATH"
          }
      
      - name: Install NSIS
        shell: powershell
        run: |
          if (!(Test-Path "C:\Program Files (x86)\NSIS\makensis.exe")) {
            Write-Host "Installing NSIS..."
            choco install nsis -y
          } else {
            Write-Host "NSIS already installed"
          }
      
      - name: Create installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
      
      - name: Rename installer
        shell: cmd
        run: |
          cd EmberViewer\installer\windows
          move EmberViewer-Setup.exe EmberViewer-${{ github.ref_name }}-Setup.exe
      
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Windows-Installer
          path: EmberViewer/installer/windows/EmberViewer-*.exe
          retention-days: 30
      
      - name: Add installer to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: EmberViewer/installer/windows/EmberViewer-*.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-linux:
    name: Linux AppImage
    runs-on: [self-hosted, Linux, X64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Clean old Qt installations
        run: |
          echo "Cleaning old Qt installations from runner..."
          rm -rf /tmp/runner/work/ember-plus/Qt/5.* || true
          rm -rf ~/work/ember-plus/Qt/5.* || true
          echo "Cleanup complete"
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        timeout-minutes: 15
        with:
          version: '6.8.*'
          host: 'linux'
          target: 'desktop'
          cache: false
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-dev
      
      - name: Build EmberViewer
        env:
          EMBERVIEWER_UPDATE_SECRET: ${{ secrets.EMBERVIEWER_UPDATE_SECRET }}
        run: |
          echo "ðŸš€ Building with $(nproc) CPU cores"
          echo "QT_ROOT_DIR: $QT_ROOT_DIR"
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$QT_ROOT_DIR" \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_CXX_FLAGS="-O3 -march=native -pipe" \
            -DCMAKE_C_FLAGS="-O3 -march=native -pipe"
          cmake --build . --config Release -- -j$(nproc)
      
      - name: Install to AppDir
        run: |
          cd build
          make install DESTDIR=AppDir
      
      - name: Download linuxdeploy and Qt plugin
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage
      
      - name: Create AppImage
        run: |
          export QMAKE=$(which qmake)
          # Use --appimage-extract-and-run to bypass FUSE requirement
          export APPIMAGE_EXTRACT_AND_RUN=1
          echo "QMAKE path: $QMAKE"
          cd build
          echo "Running linuxdeploy (using extract-and-run mode, no FUSE required)..."
          ../linuxdeploy-x86_64.AppImage --appimage-extract-and-run --appdir AppDir --plugin qt --output appimage \
            --desktop-file=AppDir/usr/share/applications/EmberViewer.desktop \
            --icon-file=AppDir/usr/share/pixmaps/emberviewer.png
          echo "Linuxdeploy completed. Checking for AppImage files..."
          ls -la *.AppImage 2>/dev/null || echo "No AppImage files found in build directory"
      
      - name: Rename AppImage
        run: |
          cd build
          # Find the generated AppImage file
          APPIMAGE_FILE=$(ls *.AppImage 2>/dev/null | head -n 1)
          if [ -n "$APPIMAGE_FILE" ]; then
            echo "Found AppImage: $APPIMAGE_FILE"
            mv "$APPIMAGE_FILE" "EmberViewer-${{ github.ref_name }}-x86_64.AppImage"
          else
            echo "ERROR: No AppImage file found!"
            ls -la
            exit 1
          fi
      
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmberViewer-Linux-AppImage
          path: build/EmberViewer-*.AppImage
          retention-days: 30
      
      - name: Add AppImage to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: build/EmberViewer-*.AppImage
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
